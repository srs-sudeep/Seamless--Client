import { Button, DynamicTable, HelmetWrapper, toast, ErrorModal } from '@/components';
import {
  useActiveMealSessions,
  useCreateMealSession,
  useCreateTransaction,
  useStopMealSession,
  useTransactionsByMealSession,
} from '@/hooks/naivedyam/useTransaction.hook';
import { useEffect, useState } from 'react';

// Extend the Window interface to include 'smartcard'
declare global {
  interface Window {
    electronAPI?: {
      onCardData: (callback: (data: any) => void) => void;
    };
  }
}

const TRANSACTION_TYPES = [
  { label: 'Breakfast', value: 'breakfast' },
  { label: 'Lunch', value: 'lunch' },
  { label: 'Dinner', value: 'dinner' },
  { label: 'Snacks', value: 'snacks' },
];

const CreateMealSession = () => {
  const [transactionType, setTransactionType] = useState<string>(TRANSACTION_TYPES[0].value);
  const [errorModal, setErrorModal] = useState<{
    isOpen: boolean;
    title: string;
    message: string;
  }>({
    isOpen: false,
    title: '',
    message: '',
  });

  const createMealSession = useCreateMealSession();
  const stopMealSession = useStopMealSession();
  const createTransaction = useCreateTransaction();

  const { data: activeSessions = [], isLoading: isLoadingSession } = useActiveMealSessions();

  type CardInfo = {
    student_name: string;
    card_data: string;
    [key: string]: any;
  };

  const [cardInfo, setCardInfo] = useState<CardInfo | null>(null);

  // There will be at most one active session
  const activeSession = activeSessions[0];

  // Fetch transactions for the active session (if any)
  const { data: transactions = [], isLoading: isLoadingTransactions } =
    useTransactionsByMealSession(activeSession?.id ?? '', !!activeSession);

  const handleCreateTransaction = async (studentId: string, studentName: string) => {
    if (!activeSession) {
      setErrorModal({
        isOpen: true,
        title: 'No Active Session',
        message: 'Please create a meal session first before processing transactions.',
      });
      return;
    }

    try {
      const transactionData = {
        meal_session_id: activeSession.id,
        student_id: studentId,
        vendor_id: activeSession.vendor_id,
        timestamp: new Date().toISOString(), // ISO format for API
        transaction_id: '', // Will be generated by backend
      };

      await createTransaction.mutateAsync(transactionData);

      toast({
        title: 'Transaction Created',
        description: `Transaction successful for ${studentName}`,
      });

      // Clear card info after successful transaction
      setCardInfo(null);
    } catch (e: any) {
      console.error('Transaction error:', e);

      // Handle specific error cases
      let errorTitle = 'Transaction Failed';
      let errorMessage = e?.message || 'An unknown error occurred';

      if (e?.response?.status === 409) {
        errorTitle = 'Duplicate Transaction';
        errorMessage = 'This student has already made a transaction for this meal session.';
      } else if (e?.response?.status === 404) {
        errorTitle = 'Student Not Found';
        errorMessage = 'The student with this card ID was not found in the system.';
      } else if (e?.response?.status === 400) {
        errorTitle = 'Invalid Transaction';
        errorMessage = e?.response?.data?.detail || 'The transaction data is invalid.';
      }

      setErrorModal({
        isOpen: true,
        title: errorTitle,
        message: errorMessage,
      });
    }
  };

  useEffect(() => {
    if (window.electronAPI?.onCardData) {
      window.electronAPI.onCardData(data => {
        setCardInfo(data);
        console.log('üì• Card info received in React:', data);

        // Auto-create transaction when card is tapped and there's an active session
        if (activeSession && data.card_data) {
          handleCreateTransaction(data.card_data, data.student_name);
        }
      });
    }
  }, [activeSession]); // Add activeSession as dependency

  const handleCreate = async () => {
    try {
      await createMealSession.mutateAsync({
        transaction_type: transactionType,
        id: '',
        vendor_id: '',
        time_start: '',
        time_end: '',
      });
      toast({ title: 'Meal session created' });
    } catch (e: any) {
      toast({
        title: 'Failed to create meal session',
        description: e?.message,
        variant: 'destructive',
      });
    }
  };

  const handleStop = async (id: string) => {
    try {
      await stopMealSession.mutateAsync(id);
      toast({ title: 'Meal session stopped' });
    } catch (e: any) {
      toast({
        title: 'Failed to stop meal session',
        description: e?.message,
        variant: 'destructive',
      });
    }
  };

  const closeErrorModal = () => {
    setErrorModal({
      isOpen: false,
      title: '',
      message: '',
    });
    // Clear card info when closing error modal
    setCardInfo(null);
  };

  // Table for transactions of the active session
  const getTransactionTableData = (txs: any[]) =>
    txs.map(tx => ({
      'Transaction ID': tx.transaction_id,
      'Student ID': tx.student_id,
      'Vendor ID': tx.vendor_id,
      Timestamp: new Date(tx.timestamp).toLocaleString('en-IN', {
        timeZone: 'Asia/Kolkata',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      }),
    }));

  return (
    <HelmetWrapper
      title="Create Meal Session | Naivedyam"
      heading="Create Meal Session"
      subHeading="Start a new meal session and view transactions for the active session."
    >
      {/* Error Modal */}
      <ErrorModal
        isOpen={errorModal.isOpen}
        onClose={closeErrorModal}
        title={errorModal.title}
        message={errorModal.message}
      />

      {/* If there is NO active session, show the create form */}
      {!activeSession && (
        <div className="flex items-center gap-4 mb-6">
          <select
            value={transactionType}
            onChange={e => setTransactionType(e.target.value)}
            className="border rounded px-3 py-2"
          >
            {TRANSACTION_TYPES.map(type => (
              <option key={type.value} value={type.value}>
                {type.label}
              </option>
            ))}
          </select>
          <Button onClick={handleCreate} disabled={createMealSession.isPending}>
            {createMealSession.isPending ? 'Creating...' : 'Create'}
          </Button>
        </div>
      )}

      {/* If there is an active session, show its info and stop button */}
      {activeSession && (
        <div className="mb-6 flex flex-col gap-4">
          <div className="font-semibold">
            <span className="mr-4">Active Session:</span>
            <span>
              Type: <b>{activeSession.transaction_type}</b>
            </span>
            <span className="ml-4">
              Vendor ID: <b>{activeSession.vendor_id}</b>
            </span>
          </div>

          {/* Card Info Display */}
          <div className="border rounded-lg p-4 bg-gray-50">
            {cardInfo ? (
              <div className="text-green-600">
                <h3 className="font-semibold text-lg mb-2">Processing Transaction... ‚è≥</h3>
                <p className="mb-1">
                  <strong>Name:</strong> {cardInfo.student_name}
                </p>
                <p className="mb-3">
                  <strong>Student ID:</strong> {cardInfo.card_data}
                </p>
                {createTransaction.isPending && (
                  <p className="text-blue-600">Creating transaction...</p>
                )}
              </div>
            ) : (
              <div className="text-blue-600">
                <p className="font-medium">Waiting for card tap...</p>
                <p className="text-sm text-gray-600">
                  Please tap a student card to process transaction
                </p>
              </div>
            )}
          </div>

          <Button
            variant="destructive"
            onClick={() => handleStop(activeSession.id)}
            disabled={stopMealSession.isPending}
          >
            {stopMealSession.isPending ? 'Stopping...' : 'Stop Session'}
          </Button>
        </div>
      )}

      <DynamicTable
        tableHeading={
          activeSession ? 'Transactions for Active Meal Session' : 'No Active Meal Session'
        }
        data={activeSession ? getTransactionTableData(transactions) : []}
        isLoading={isLoadingSession || (activeSession && isLoadingTransactions)}
      />
    </HelmetWrapper>
  );
};

export default CreateMealSession;
